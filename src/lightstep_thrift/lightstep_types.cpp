/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "lightstep_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace lightstep_thrift {


KeyValue::~KeyValue() throw() {
}


void KeyValue::__set_Key(const std::string& val) {
  this->Key = val;
}

void KeyValue::__set_Value(const std::string& val) {
  this->Value = val;
}

const char* KeyValue::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t KeyValue::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t KeyValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Key = false;
  bool isset_Value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Key);
          isset_Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          isset_Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("KeyValue");

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(KeyValue &a, KeyValue &b) {
  using ::std::swap;
  swap(a.Key, b.Key);
  swap(a.Value, b.Value);
}

KeyValue::KeyValue(const KeyValue& other0) {
  Key = other0.Key;
  Value = other0.Value;
}
KeyValue& KeyValue::operator=(const KeyValue& other1) {
  Key = other1.Key;
  Value = other1.Value;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const KeyValue& obj) {
  using apache::thrift::to_string;
  out << "KeyValue(";
  out << "Key=" << to_string(obj.Key);
  out << ", " << "Value=" << to_string(obj.Value);
  out << ")";
  return out;
}


NamedCounter::~NamedCounter() throw() {
}


void NamedCounter::__set_Name(const std::string& val) {
  this->Name = val;
}

void NamedCounter::__set_Value(const int64_t val) {
  this->Value = val;
}

const char* NamedCounter::ascii_fingerprint = "1CCCF6FC31CFD1D61BBBB1BAF3590620";
const uint8_t NamedCounter::binary_fingerprint[16] = {0x1C,0xCC,0xF6,0xFC,0x31,0xCF,0xD1,0xD6,0x1B,0xBB,0xB1,0xBA,0xF3,0x59,0x06,0x20};

uint32_t NamedCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Name = false;
  bool isset_Value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          isset_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Value);
          isset_Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NamedCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("NamedCounter");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(NamedCounter &a, NamedCounter &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Value, b.Value);
}

NamedCounter::NamedCounter(const NamedCounter& other2) {
  Name = other2.Name;
  Value = other2.Value;
}
NamedCounter& NamedCounter::operator=(const NamedCounter& other3) {
  Name = other3.Name;
  Value = other3.Value;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const NamedCounter& obj) {
  using apache::thrift::to_string;
  out << "NamedCounter(";
  out << "Name=" << to_string(obj.Name);
  out << ", " << "Value=" << to_string(obj.Value);
  out << ")";
  return out;
}


Runtime::~Runtime() throw() {
}


void Runtime::__set_guid(const std::string& val) {
  this->guid = val;
__isset.guid = true;
}

void Runtime::__set_start_micros(const int64_t val) {
  this->start_micros = val;
__isset.start_micros = true;
}

void Runtime::__set_group_name(const std::string& val) {
  this->group_name = val;
__isset.group_name = true;
}

void Runtime::__set_attrs(const std::vector<KeyValue> & val) {
  this->attrs = val;
__isset.attrs = true;
}

const char* Runtime::ascii_fingerprint = "3B4A5DBE0E7BC5BBB17C3223CBB0897F";
const uint8_t Runtime::binary_fingerprint[16] = {0x3B,0x4A,0x5D,0xBE,0x0E,0x7B,0xC5,0xBB,0xB1,0x7C,0x32,0x23,0xCB,0xB0,0x89,0x7F};

uint32_t Runtime::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_micros);
          this->__isset.start_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group_name);
          this->__isset.group_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attrs.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->attrs.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += this->attrs[_i8].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Runtime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Runtime");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_micros) {
    xfer += oprot->writeFieldBegin("start_micros", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->start_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_name) {
    xfer += oprot->writeFieldBegin("group_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->group_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attrs) {
    xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attrs.size()));
      std::vector<KeyValue> ::const_iterator _iter9;
      for (_iter9 = this->attrs.begin(); _iter9 != this->attrs.end(); ++_iter9)
      {
        xfer += (*_iter9).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Runtime &a, Runtime &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.start_micros, b.start_micros);
  swap(a.group_name, b.group_name);
  swap(a.attrs, b.attrs);
  swap(a.__isset, b.__isset);
}

Runtime::Runtime(const Runtime& other10) {
  guid = other10.guid;
  start_micros = other10.start_micros;
  group_name = other10.group_name;
  attrs = other10.attrs;
  __isset = other10.__isset;
}
Runtime& Runtime::operator=(const Runtime& other11) {
  guid = other11.guid;
  start_micros = other11.start_micros;
  group_name = other11.group_name;
  attrs = other11.attrs;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Runtime& obj) {
  using apache::thrift::to_string;
  out << "Runtime(";
  out << "guid="; (obj.__isset.guid ? (out << to_string(obj.guid)) : (out << "<null>"));
  out << ", " << "start_micros="; (obj.__isset.start_micros ? (out << to_string(obj.start_micros)) : (out << "<null>"));
  out << ", " << "group_name="; (obj.__isset.group_name ? (out << to_string(obj.group_name)) : (out << "<null>"));
  out << ", " << "attrs="; (obj.__isset.attrs ? (out << to_string(obj.attrs)) : (out << "<null>"));
  out << ")";
  return out;
}


LogRecord::~LogRecord() throw() {
}


void LogRecord::__set_timestamp_micros(const int64_t val) {
  this->timestamp_micros = val;
__isset.timestamp_micros = true;
}

void LogRecord::__set_runtime_guid(const std::string& val) {
  this->runtime_guid = val;
__isset.runtime_guid = true;
}

void LogRecord::__set_span_guid(const std::string& val) {
  this->span_guid = val;
__isset.span_guid = true;
}

void LogRecord::__set_stable_name(const std::string& val) {
  this->stable_name = val;
__isset.stable_name = true;
}

void LogRecord::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void LogRecord::__set_level(const std::string& val) {
  this->level = val;
__isset.level = true;
}

void LogRecord::__set_thread_id(const int64_t val) {
  this->thread_id = val;
__isset.thread_id = true;
}

void LogRecord::__set_filename(const std::string& val) {
  this->filename = val;
__isset.filename = true;
}

void LogRecord::__set_line_number(const int64_t val) {
  this->line_number = val;
__isset.line_number = true;
}

void LogRecord::__set_stack_frames(const std::vector<std::string> & val) {
  this->stack_frames = val;
__isset.stack_frames = true;
}

void LogRecord::__set_payload_json(const std::string& val) {
  this->payload_json = val;
__isset.payload_json = true;
}

void LogRecord::__set_error_flag(const bool val) {
  this->error_flag = val;
__isset.error_flag = true;
}

const char* LogRecord::ascii_fingerprint = "37332972DE3466A6AC560DAAF028987D";
const uint8_t LogRecord::binary_fingerprint[16] = {0x37,0x33,0x29,0x72,0xDE,0x34,0x66,0xA6,0xAC,0x56,0x0D,0xAA,0xF0,0x28,0x98,0x7D};

uint32_t LogRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_micros);
          this->__isset.timestamp_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runtime_guid);
          this->__isset.runtime_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->span_guid);
          this->__isset.span_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stable_name);
          this->__isset.stable_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thread_id);
          this->__isset.thread_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->line_number);
          this->__isset.line_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stack_frames.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->stack_frames.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->stack_frames[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stack_frames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->payload_json);
          this->__isset.payload_json = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->error_flag);
          this->__isset.error_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LogRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("LogRecord");

  if (this->__isset.timestamp_micros) {
    xfer += oprot->writeFieldBegin("timestamp_micros", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->timestamp_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_guid) {
    xfer += oprot->writeFieldBegin("runtime_guid", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->runtime_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.span_guid) {
    xfer += oprot->writeFieldBegin("span_guid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->span_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stable_name) {
    xfer += oprot->writeFieldBegin("stable_name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->stable_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level) {
    xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->level);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.thread_id) {
    xfer += oprot->writeFieldBegin("thread_id", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->thread_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.filename) {
    xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->filename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.line_number) {
    xfer += oprot->writeFieldBegin("line_number", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->line_number);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stack_frames) {
    xfer += oprot->writeFieldBegin("stack_frames", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->stack_frames.size()));
      std::vector<std::string> ::const_iterator _iter17;
      for (_iter17 = this->stack_frames.begin(); _iter17 != this->stack_frames.end(); ++_iter17)
      {
        xfer += oprot->writeString((*_iter17));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload_json) {
    xfer += oprot->writeFieldBegin("payload_json", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->payload_json);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error_flag) {
    xfer += oprot->writeFieldBegin("error_flag", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->error_flag);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(LogRecord &a, LogRecord &b) {
  using ::std::swap;
  swap(a.timestamp_micros, b.timestamp_micros);
  swap(a.runtime_guid, b.runtime_guid);
  swap(a.span_guid, b.span_guid);
  swap(a.stable_name, b.stable_name);
  swap(a.message, b.message);
  swap(a.level, b.level);
  swap(a.thread_id, b.thread_id);
  swap(a.filename, b.filename);
  swap(a.line_number, b.line_number);
  swap(a.stack_frames, b.stack_frames);
  swap(a.payload_json, b.payload_json);
  swap(a.error_flag, b.error_flag);
  swap(a.__isset, b.__isset);
}

LogRecord::LogRecord(const LogRecord& other18) {
  timestamp_micros = other18.timestamp_micros;
  runtime_guid = other18.runtime_guid;
  span_guid = other18.span_guid;
  stable_name = other18.stable_name;
  message = other18.message;
  level = other18.level;
  thread_id = other18.thread_id;
  filename = other18.filename;
  line_number = other18.line_number;
  stack_frames = other18.stack_frames;
  payload_json = other18.payload_json;
  error_flag = other18.error_flag;
  __isset = other18.__isset;
}
LogRecord& LogRecord::operator=(const LogRecord& other19) {
  timestamp_micros = other19.timestamp_micros;
  runtime_guid = other19.runtime_guid;
  span_guid = other19.span_guid;
  stable_name = other19.stable_name;
  message = other19.message;
  level = other19.level;
  thread_id = other19.thread_id;
  filename = other19.filename;
  line_number = other19.line_number;
  stack_frames = other19.stack_frames;
  payload_json = other19.payload_json;
  error_flag = other19.error_flag;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const LogRecord& obj) {
  using apache::thrift::to_string;
  out << "LogRecord(";
  out << "timestamp_micros="; (obj.__isset.timestamp_micros ? (out << to_string(obj.timestamp_micros)) : (out << "<null>"));
  out << ", " << "runtime_guid="; (obj.__isset.runtime_guid ? (out << to_string(obj.runtime_guid)) : (out << "<null>"));
  out << ", " << "span_guid="; (obj.__isset.span_guid ? (out << to_string(obj.span_guid)) : (out << "<null>"));
  out << ", " << "stable_name="; (obj.__isset.stable_name ? (out << to_string(obj.stable_name)) : (out << "<null>"));
  out << ", " << "message="; (obj.__isset.message ? (out << to_string(obj.message)) : (out << "<null>"));
  out << ", " << "level="; (obj.__isset.level ? (out << to_string(obj.level)) : (out << "<null>"));
  out << ", " << "thread_id="; (obj.__isset.thread_id ? (out << to_string(obj.thread_id)) : (out << "<null>"));
  out << ", " << "filename="; (obj.__isset.filename ? (out << to_string(obj.filename)) : (out << "<null>"));
  out << ", " << "line_number="; (obj.__isset.line_number ? (out << to_string(obj.line_number)) : (out << "<null>"));
  out << ", " << "stack_frames="; (obj.__isset.stack_frames ? (out << to_string(obj.stack_frames)) : (out << "<null>"));
  out << ", " << "payload_json="; (obj.__isset.payload_json ? (out << to_string(obj.payload_json)) : (out << "<null>"));
  out << ", " << "error_flag="; (obj.__isset.error_flag ? (out << to_string(obj.error_flag)) : (out << "<null>"));
  out << ")";
  return out;
}


TraceJoinId::~TraceJoinId() throw() {
}


void TraceJoinId::__set_TraceKey(const std::string& val) {
  this->TraceKey = val;
}

void TraceJoinId::__set_Value(const std::string& val) {
  this->Value = val;
}

const char* TraceJoinId::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t TraceJoinId::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t TraceJoinId::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_TraceKey = false;
  bool isset_Value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TraceKey);
          isset_TraceKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          isset_Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_TraceKey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TraceJoinId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("TraceJoinId");

  xfer += oprot->writeFieldBegin("TraceKey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->TraceKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(TraceJoinId &a, TraceJoinId &b) {
  using ::std::swap;
  swap(a.TraceKey, b.TraceKey);
  swap(a.Value, b.Value);
}

TraceJoinId::TraceJoinId(const TraceJoinId& other20) {
  TraceKey = other20.TraceKey;
  Value = other20.Value;
}
TraceJoinId& TraceJoinId::operator=(const TraceJoinId& other21) {
  TraceKey = other21.TraceKey;
  Value = other21.Value;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const TraceJoinId& obj) {
  using apache::thrift::to_string;
  out << "TraceJoinId(";
  out << "TraceKey=" << to_string(obj.TraceKey);
  out << ", " << "Value=" << to_string(obj.Value);
  out << ")";
  return out;
}


SpanRecord::~SpanRecord() throw() {
}


void SpanRecord::__set_span_guid(const std::string& val) {
  this->span_guid = val;
__isset.span_guid = true;
}

void SpanRecord::__set_runtime_guid(const std::string& val) {
  this->runtime_guid = val;
__isset.runtime_guid = true;
}

void SpanRecord::__set_span_name(const std::string& val) {
  this->span_name = val;
__isset.span_name = true;
}

void SpanRecord::__set_join_ids(const std::vector<TraceJoinId> & val) {
  this->join_ids = val;
__isset.join_ids = true;
}

void SpanRecord::__set_oldest_micros(const int64_t val) {
  this->oldest_micros = val;
__isset.oldest_micros = true;
}

void SpanRecord::__set_youngest_micros(const int64_t val) {
  this->youngest_micros = val;
__isset.youngest_micros = true;
}

void SpanRecord::__set_attributes(const std::vector<KeyValue> & val) {
  this->attributes = val;
__isset.attributes = true;
}

void SpanRecord::__set_error_flag(const bool val) {
  this->error_flag = val;
__isset.error_flag = true;
}

void SpanRecord::__set_log_records(const std::vector<LogRecord> & val) {
  this->log_records = val;
__isset.log_records = true;
}

const char* SpanRecord::ascii_fingerprint = "BF80307314D01C6CDEB6753730BF37BA";
const uint8_t SpanRecord::binary_fingerprint[16] = {0xBF,0x80,0x30,0x73,0x14,0xD0,0x1C,0x6C,0xDE,0xB6,0x75,0x37,0x30,0xBF,0x37,0xBA};

uint32_t SpanRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->span_guid);
          this->__isset.span_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runtime_guid);
          this->__isset.runtime_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->span_name);
          this->__isset.span_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->join_ids.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->join_ids.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += this->join_ids[_i26].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.join_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_micros);
          this->__isset.oldest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->youngest_micros);
          this->__isset.youngest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->attributes.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += this->attributes[_i31].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->error_flag);
          this->__isset.error_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->log_records.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->log_records.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += this->log_records[_i36].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.log_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpanRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SpanRecord");

  if (this->__isset.span_guid) {
    xfer += oprot->writeFieldBegin("span_guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->span_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_guid) {
    xfer += oprot->writeFieldBegin("runtime_guid", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->runtime_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.span_name) {
    xfer += oprot->writeFieldBegin("span_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->span_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.join_ids) {
    xfer += oprot->writeFieldBegin("join_ids", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->join_ids.size()));
      std::vector<TraceJoinId> ::const_iterator _iter37;
      for (_iter37 = this->join_ids.begin(); _iter37 != this->join_ids.end(); ++_iter37)
      {
        xfer += (*_iter37).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oldest_micros) {
    xfer += oprot->writeFieldBegin("oldest_micros", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->oldest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.youngest_micros) {
    xfer += oprot->writeFieldBegin("youngest_micros", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->youngest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
      std::vector<KeyValue> ::const_iterator _iter38;
      for (_iter38 = this->attributes.begin(); _iter38 != this->attributes.end(); ++_iter38)
      {
        xfer += (*_iter38).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error_flag) {
    xfer += oprot->writeFieldBegin("error_flag", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->error_flag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.log_records) {
    xfer += oprot->writeFieldBegin("log_records", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->log_records.size()));
      std::vector<LogRecord> ::const_iterator _iter39;
      for (_iter39 = this->log_records.begin(); _iter39 != this->log_records.end(); ++_iter39)
      {
        xfer += (*_iter39).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SpanRecord &a, SpanRecord &b) {
  using ::std::swap;
  swap(a.span_guid, b.span_guid);
  swap(a.runtime_guid, b.runtime_guid);
  swap(a.span_name, b.span_name);
  swap(a.join_ids, b.join_ids);
  swap(a.oldest_micros, b.oldest_micros);
  swap(a.youngest_micros, b.youngest_micros);
  swap(a.attributes, b.attributes);
  swap(a.error_flag, b.error_flag);
  swap(a.log_records, b.log_records);
  swap(a.__isset, b.__isset);
}

SpanRecord::SpanRecord(const SpanRecord& other40) {
  span_guid = other40.span_guid;
  runtime_guid = other40.runtime_guid;
  span_name = other40.span_name;
  join_ids = other40.join_ids;
  oldest_micros = other40.oldest_micros;
  youngest_micros = other40.youngest_micros;
  attributes = other40.attributes;
  error_flag = other40.error_flag;
  log_records = other40.log_records;
  __isset = other40.__isset;
}
SpanRecord& SpanRecord::operator=(const SpanRecord& other41) {
  span_guid = other41.span_guid;
  runtime_guid = other41.runtime_guid;
  span_name = other41.span_name;
  join_ids = other41.join_ids;
  oldest_micros = other41.oldest_micros;
  youngest_micros = other41.youngest_micros;
  attributes = other41.attributes;
  error_flag = other41.error_flag;
  log_records = other41.log_records;
  __isset = other41.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SpanRecord& obj) {
  using apache::thrift::to_string;
  out << "SpanRecord(";
  out << "span_guid="; (obj.__isset.span_guid ? (out << to_string(obj.span_guid)) : (out << "<null>"));
  out << ", " << "runtime_guid="; (obj.__isset.runtime_guid ? (out << to_string(obj.runtime_guid)) : (out << "<null>"));
  out << ", " << "span_name="; (obj.__isset.span_name ? (out << to_string(obj.span_name)) : (out << "<null>"));
  out << ", " << "join_ids="; (obj.__isset.join_ids ? (out << to_string(obj.join_ids)) : (out << "<null>"));
  out << ", " << "oldest_micros="; (obj.__isset.oldest_micros ? (out << to_string(obj.oldest_micros)) : (out << "<null>"));
  out << ", " << "youngest_micros="; (obj.__isset.youngest_micros ? (out << to_string(obj.youngest_micros)) : (out << "<null>"));
  out << ", " << "attributes="; (obj.__isset.attributes ? (out << to_string(obj.attributes)) : (out << "<null>"));
  out << ", " << "error_flag="; (obj.__isset.error_flag ? (out << to_string(obj.error_flag)) : (out << "<null>"));
  out << ", " << "log_records="; (obj.__isset.log_records ? (out << to_string(obj.log_records)) : (out << "<null>"));
  out << ")";
  return out;
}


Auth::~Auth() throw() {
}


void Auth::__set_access_token(const std::string& val) {
  this->access_token = val;
__isset.access_token = true;
}

const char* Auth::ascii_fingerprint = "66E694018C17E5B65A59AE8F55CCA3CD";
const uint8_t Auth::binary_fingerprint[16] = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

uint32_t Auth::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->access_token);
          this->__isset.access_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Auth::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Auth");

  if (this->__isset.access_token) {
    xfer += oprot->writeFieldBegin("access_token", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->access_token);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Auth &a, Auth &b) {
  using ::std::swap;
  swap(a.access_token, b.access_token);
  swap(a.__isset, b.__isset);
}

Auth::Auth(const Auth& other42) {
  access_token = other42.access_token;
  __isset = other42.__isset;
}
Auth& Auth::operator=(const Auth& other43) {
  access_token = other43.access_token;
  __isset = other43.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Auth& obj) {
  using apache::thrift::to_string;
  out << "Auth(";
  out << "access_token="; (obj.__isset.access_token ? (out << to_string(obj.access_token)) : (out << "<null>"));
  out << ")";
  return out;
}


Timing::~Timing() throw() {
}


void Timing::__set_receive_micros(const int64_t val) {
  this->receive_micros = val;
__isset.receive_micros = true;
}

void Timing::__set_transmit_micros(const int64_t val) {
  this->transmit_micros = val;
__isset.transmit_micros = true;
}

const char* Timing::ascii_fingerprint = "0354D07C94CB8542872CA1277008860A";
const uint8_t Timing::binary_fingerprint[16] = {0x03,0x54,0xD0,0x7C,0x94,0xCB,0x85,0x42,0x87,0x2C,0xA1,0x27,0x70,0x08,0x86,0x0A};

uint32_t Timing::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receive_micros);
          this->__isset.receive_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transmit_micros);
          this->__isset.transmit_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Timing::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Timing");

  if (this->__isset.receive_micros) {
    xfer += oprot->writeFieldBegin("receive_micros", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->receive_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transmit_micros) {
    xfer += oprot->writeFieldBegin("transmit_micros", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->transmit_micros);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Timing &a, Timing &b) {
  using ::std::swap;
  swap(a.receive_micros, b.receive_micros);
  swap(a.transmit_micros, b.transmit_micros);
  swap(a.__isset, b.__isset);
}

Timing::Timing(const Timing& other44) {
  receive_micros = other44.receive_micros;
  transmit_micros = other44.transmit_micros;
  __isset = other44.__isset;
}
Timing& Timing::operator=(const Timing& other45) {
  receive_micros = other45.receive_micros;
  transmit_micros = other45.transmit_micros;
  __isset = other45.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Timing& obj) {
  using apache::thrift::to_string;
  out << "Timing(";
  out << "receive_micros="; (obj.__isset.receive_micros ? (out << to_string(obj.receive_micros)) : (out << "<null>"));
  out << ", " << "transmit_micros="; (obj.__isset.transmit_micros ? (out << to_string(obj.transmit_micros)) : (out << "<null>"));
  out << ")";
  return out;
}


SampleCount::~SampleCount() throw() {
}


void SampleCount::__set_oldest_micros(const int64_t val) {
  this->oldest_micros = val;
__isset.oldest_micros = true;
}

void SampleCount::__set_youngest_micros(const int64_t val) {
  this->youngest_micros = val;
__isset.youngest_micros = true;
}

void SampleCount::__set_count(const int64_t val) {
  this->count = val;
__isset.count = true;
}

const char* SampleCount::ascii_fingerprint = "6952BA042A8F8C3F826B0B8BA3E58440";
const uint8_t SampleCount::binary_fingerprint[16] = {0x69,0x52,0xBA,0x04,0x2A,0x8F,0x8C,0x3F,0x82,0x6B,0x0B,0x8B,0xA3,0xE5,0x84,0x40};

uint32_t SampleCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_micros);
          this->__isset.oldest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->youngest_micros);
          this->__isset.youngest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SampleCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SampleCount");

  if (this->__isset.oldest_micros) {
    xfer += oprot->writeFieldBegin("oldest_micros", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->oldest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.youngest_micros) {
    xfer += oprot->writeFieldBegin("youngest_micros", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->youngest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.count) {
    xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->count);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SampleCount &a, SampleCount &b) {
  using ::std::swap;
  swap(a.oldest_micros, b.oldest_micros);
  swap(a.youngest_micros, b.youngest_micros);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

SampleCount::SampleCount(const SampleCount& other46) {
  oldest_micros = other46.oldest_micros;
  youngest_micros = other46.youngest_micros;
  count = other46.count;
  __isset = other46.__isset;
}
SampleCount& SampleCount::operator=(const SampleCount& other47) {
  oldest_micros = other47.oldest_micros;
  youngest_micros = other47.youngest_micros;
  count = other47.count;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SampleCount& obj) {
  using apache::thrift::to_string;
  out << "SampleCount(";
  out << "oldest_micros="; (obj.__isset.oldest_micros ? (out << to_string(obj.oldest_micros)) : (out << "<null>"));
  out << ", " << "youngest_micros="; (obj.__isset.youngest_micros ? (out << to_string(obj.youngest_micros)) : (out << "<null>"));
  out << ", " << "count="; (obj.__isset.count ? (out << to_string(obj.count)) : (out << "<null>"));
  out << ")";
  return out;
}


ReportRequest::~ReportRequest() throw() {
}


void ReportRequest::__set_runtime(const Runtime& val) {
  this->runtime = val;
__isset.runtime = true;
}

void ReportRequest::__set_span_records(const std::vector<SpanRecord> & val) {
  this->span_records = val;
__isset.span_records = true;
}

void ReportRequest::__set_log_records(const std::vector<LogRecord> & val) {
  this->log_records = val;
__isset.log_records = true;
}

void ReportRequest::__set_timestamp_offset_micros(const int64_t val) {
  this->timestamp_offset_micros = val;
__isset.timestamp_offset_micros = true;
}

void ReportRequest::__set_oldest_micros(const int64_t val) {
  this->oldest_micros = val;
__isset.oldest_micros = true;
}

void ReportRequest::__set_youngest_micros(const int64_t val) {
  this->youngest_micros = val;
__isset.youngest_micros = true;
}

void ReportRequest::__set_counters(const std::vector<NamedCounter> & val) {
  this->counters = val;
__isset.counters = true;
}

const char* ReportRequest::ascii_fingerprint = "822AEA65A1F7B99D5E7B5A8B149BF387";
const uint8_t ReportRequest::binary_fingerprint[16] = {0x82,0x2A,0xEA,0x65,0xA1,0xF7,0xB9,0x9D,0x5E,0x7B,0x5A,0x8B,0x14,0x9B,0xF3,0x87};

uint32_t ReportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->runtime.read(iprot);
          this->__isset.runtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->span_records.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->span_records.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += this->span_records[_i52].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.span_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->log_records.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->log_records.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += this->log_records[_i57].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.log_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_offset_micros);
          this->__isset.timestamp_offset_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_micros);
          this->__isset.oldest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->youngest_micros);
          this->__isset.youngest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counters.clear();
            uint32_t _size58;
            ::apache::thrift::protocol::TType _etype61;
            xfer += iprot->readListBegin(_etype61, _size58);
            this->counters.resize(_size58);
            uint32_t _i62;
            for (_i62 = 0; _i62 < _size58; ++_i62)
            {
              xfer += this->counters[_i62].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReportRequest");

  if (this->__isset.runtime) {
    xfer += oprot->writeFieldBegin("runtime", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->runtime.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.span_records) {
    xfer += oprot->writeFieldBegin("span_records", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->span_records.size()));
      std::vector<SpanRecord> ::const_iterator _iter63;
      for (_iter63 = this->span_records.begin(); _iter63 != this->span_records.end(); ++_iter63)
      {
        xfer += (*_iter63).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.log_records) {
    xfer += oprot->writeFieldBegin("log_records", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->log_records.size()));
      std::vector<LogRecord> ::const_iterator _iter64;
      for (_iter64 = this->log_records.begin(); _iter64 != this->log_records.end(); ++_iter64)
      {
        xfer += (*_iter64).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp_offset_micros) {
    xfer += oprot->writeFieldBegin("timestamp_offset_micros", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->timestamp_offset_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oldest_micros) {
    xfer += oprot->writeFieldBegin("oldest_micros", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->oldest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.youngest_micros) {
    xfer += oprot->writeFieldBegin("youngest_micros", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->youngest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counters) {
    xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->counters.size()));
      std::vector<NamedCounter> ::const_iterator _iter65;
      for (_iter65 = this->counters.begin(); _iter65 != this->counters.end(); ++_iter65)
      {
        xfer += (*_iter65).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReportRequest &a, ReportRequest &b) {
  using ::std::swap;
  swap(a.runtime, b.runtime);
  swap(a.span_records, b.span_records);
  swap(a.log_records, b.log_records);
  swap(a.timestamp_offset_micros, b.timestamp_offset_micros);
  swap(a.oldest_micros, b.oldest_micros);
  swap(a.youngest_micros, b.youngest_micros);
  swap(a.counters, b.counters);
  swap(a.__isset, b.__isset);
}

ReportRequest::ReportRequest(const ReportRequest& other66) {
  runtime = other66.runtime;
  span_records = other66.span_records;
  log_records = other66.log_records;
  timestamp_offset_micros = other66.timestamp_offset_micros;
  oldest_micros = other66.oldest_micros;
  youngest_micros = other66.youngest_micros;
  counters = other66.counters;
  __isset = other66.__isset;
}
ReportRequest& ReportRequest::operator=(const ReportRequest& other67) {
  runtime = other67.runtime;
  span_records = other67.span_records;
  log_records = other67.log_records;
  timestamp_offset_micros = other67.timestamp_offset_micros;
  oldest_micros = other67.oldest_micros;
  youngest_micros = other67.youngest_micros;
  counters = other67.counters;
  __isset = other67.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReportRequest& obj) {
  using apache::thrift::to_string;
  out << "ReportRequest(";
  out << "runtime="; (obj.__isset.runtime ? (out << to_string(obj.runtime)) : (out << "<null>"));
  out << ", " << "span_records="; (obj.__isset.span_records ? (out << to_string(obj.span_records)) : (out << "<null>"));
  out << ", " << "log_records="; (obj.__isset.log_records ? (out << to_string(obj.log_records)) : (out << "<null>"));
  out << ", " << "timestamp_offset_micros="; (obj.__isset.timestamp_offset_micros ? (out << to_string(obj.timestamp_offset_micros)) : (out << "<null>"));
  out << ", " << "oldest_micros="; (obj.__isset.oldest_micros ? (out << to_string(obj.oldest_micros)) : (out << "<null>"));
  out << ", " << "youngest_micros="; (obj.__isset.youngest_micros ? (out << to_string(obj.youngest_micros)) : (out << "<null>"));
  out << ", " << "counters="; (obj.__isset.counters ? (out << to_string(obj.counters)) : (out << "<null>"));
  out << ")";
  return out;
}


Command::~Command() throw() {
}


void Command::__set_disable(const bool val) {
  this->disable = val;
__isset.disable = true;
}

const char* Command::ascii_fingerprint = "BF054652DEF86253C2BEE7D947F167DD";
const uint8_t Command::binary_fingerprint[16] = {0xBF,0x05,0x46,0x52,0xDE,0xF8,0x62,0x53,0xC2,0xBE,0xE7,0xD9,0x47,0xF1,0x67,0xDD};

uint32_t Command::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable);
          this->__isset.disable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Command::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Command");

  if (this->__isset.disable) {
    xfer += oprot->writeFieldBegin("disable", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->disable);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Command &a, Command &b) {
  using ::std::swap;
  swap(a.disable, b.disable);
  swap(a.__isset, b.__isset);
}

Command::Command(const Command& other68) {
  disable = other68.disable;
  __isset = other68.__isset;
}
Command& Command::operator=(const Command& other69) {
  disable = other69.disable;
  __isset = other69.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Command& obj) {
  using apache::thrift::to_string;
  out << "Command(";
  out << "disable="; (obj.__isset.disable ? (out << to_string(obj.disable)) : (out << "<null>"));
  out << ")";
  return out;
}


ReportResponse::~ReportResponse() throw() {
}


void ReportResponse::__set_commands(const std::vector<Command> & val) {
  this->commands = val;
__isset.commands = true;
}

void ReportResponse::__set_timing(const Timing& val) {
  this->timing = val;
__isset.timing = true;
}

void ReportResponse::__set_errors(const std::vector<std::string> & val) {
  this->errors = val;
__isset.errors = true;
}

const char* ReportResponse::ascii_fingerprint = "F57E18FDCF08B4D4B17A83ACE0F460B4";
const uint8_t ReportResponse::binary_fingerprint[16] = {0xF5,0x7E,0x18,0xFD,0xCF,0x08,0xB4,0xD4,0xB1,0x7A,0x83,0xAC,0xE0,0xF4,0x60,0xB4};

uint32_t ReportResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commands.clear();
            uint32_t _size70;
            ::apache::thrift::protocol::TType _etype73;
            xfer += iprot->readListBegin(_etype73, _size70);
            this->commands.resize(_size70);
            uint32_t _i74;
            for (_i74 = 0; _i74 < _size70; ++_i74)
            {
              xfer += this->commands[_i74].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.commands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timing.read(iprot);
          this->__isset.timing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->errors.clear();
            uint32_t _size75;
            ::apache::thrift::protocol::TType _etype78;
            xfer += iprot->readListBegin(_etype78, _size75);
            this->errors.resize(_size75);
            uint32_t _i79;
            for (_i79 = 0; _i79 < _size75; ++_i79)
            {
              xfer += iprot->readString(this->errors[_i79]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ReportResponse");

  if (this->__isset.commands) {
    xfer += oprot->writeFieldBegin("commands", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commands.size()));
      std::vector<Command> ::const_iterator _iter80;
      for (_iter80 = this->commands.begin(); _iter80 != this->commands.end(); ++_iter80)
      {
        xfer += (*_iter80).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timing) {
    xfer += oprot->writeFieldBegin("timing", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->timing.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.errors) {
    xfer += oprot->writeFieldBegin("errors", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->errors.size()));
      std::vector<std::string> ::const_iterator _iter81;
      for (_iter81 = this->errors.begin(); _iter81 != this->errors.end(); ++_iter81)
      {
        xfer += oprot->writeString((*_iter81));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ReportResponse &a, ReportResponse &b) {
  using ::std::swap;
  swap(a.commands, b.commands);
  swap(a.timing, b.timing);
  swap(a.errors, b.errors);
  swap(a.__isset, b.__isset);
}

ReportResponse::ReportResponse(const ReportResponse& other82) {
  commands = other82.commands;
  timing = other82.timing;
  errors = other82.errors;
  __isset = other82.__isset;
}
ReportResponse& ReportResponse::operator=(const ReportResponse& other83) {
  commands = other83.commands;
  timing = other83.timing;
  errors = other83.errors;
  __isset = other83.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ReportResponse& obj) {
  using apache::thrift::to_string;
  out << "ReportResponse(";
  out << "commands="; (obj.__isset.commands ? (out << to_string(obj.commands)) : (out << "<null>"));
  out << ", " << "timing="; (obj.__isset.timing ? (out << to_string(obj.timing)) : (out << "<null>"));
  out << ", " << "errors="; (obj.__isset.errors ? (out << to_string(obj.errors)) : (out << "<null>"));
  out << ")";
  return out;
}

} // namespace
