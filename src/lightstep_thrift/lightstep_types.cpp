/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "lightstep_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace lightstep_thrift {


KeyValue::~KeyValue() throw() {
}


void KeyValue::__set_Key(const std::string& val) {
  this->Key = val;
}

void KeyValue::__set_Value(const std::string& val) {
  this->Value = val;
}

uint32_t KeyValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Key = false;
  bool isset_Value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Key);
          isset_Key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          isset_Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t KeyValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("KeyValue");

  xfer += oprot->writeFieldBegin("Key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(KeyValue &a, KeyValue &b) {
  using ::std::swap;
  swap(a.Key, b.Key);
  swap(a.Value, b.Value);
}

KeyValue::KeyValue(const KeyValue& other0) {
  Key = other0.Key;
  Value = other0.Value;
}
KeyValue::KeyValue( KeyValue&& other1) {
  Key = std::move(other1.Key);
  Value = std::move(other1.Value);
}
KeyValue& KeyValue::operator=(const KeyValue& other2) {
  Key = other2.Key;
  Value = other2.Value;
  return *this;
}
KeyValue& KeyValue::operator=(KeyValue&& other3) {
  Key = std::move(other3.Key);
  Value = std::move(other3.Value);
  return *this;
}
void KeyValue::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "KeyValue(";
  out << "Key=" << to_string(Key);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


NamedCounter::~NamedCounter() throw() {
}


void NamedCounter::__set_Name(const std::string& val) {
  this->Name = val;
}

void NamedCounter::__set_Value(const int64_t val) {
  this->Value = val;
}

uint32_t NamedCounter::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_Name = false;
  bool isset_Value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          isset_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->Value);
          isset_Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_Name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NamedCounter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NamedCounter");

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NamedCounter &a, NamedCounter &b) {
  using ::std::swap;
  swap(a.Name, b.Name);
  swap(a.Value, b.Value);
}

NamedCounter::NamedCounter(const NamedCounter& other4) {
  Name = other4.Name;
  Value = other4.Value;
}
NamedCounter::NamedCounter( NamedCounter&& other5) {
  Name = std::move(other5.Name);
  Value = std::move(other5.Value);
}
NamedCounter& NamedCounter::operator=(const NamedCounter& other6) {
  Name = other6.Name;
  Value = other6.Value;
  return *this;
}
NamedCounter& NamedCounter::operator=(NamedCounter&& other7) {
  Name = std::move(other7.Name);
  Value = std::move(other7.Value);
  return *this;
}
void NamedCounter::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NamedCounter(";
  out << "Name=" << to_string(Name);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


Runtime::~Runtime() throw() {
}


void Runtime::__set_guid(const std::string& val) {
  this->guid = val;
__isset.guid = true;
}

void Runtime::__set_start_micros(const int64_t val) {
  this->start_micros = val;
__isset.start_micros = true;
}

void Runtime::__set_group_name(const std::string& val) {
  this->group_name = val;
__isset.group_name = true;
}

void Runtime::__set_attrs(const std::vector<KeyValue> & val) {
  this->attrs = val;
__isset.attrs = true;
}

uint32_t Runtime::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->guid);
          this->__isset.guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_micros);
          this->__isset.start_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group_name);
          this->__isset.group_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attrs.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->attrs.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->attrs[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attrs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Runtime::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Runtime");

  if (this->__isset.guid) {
    xfer += oprot->writeFieldBegin("guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.start_micros) {
    xfer += oprot->writeFieldBegin("start_micros", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->start_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.group_name) {
    xfer += oprot->writeFieldBegin("group_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->group_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attrs) {
    xfer += oprot->writeFieldBegin("attrs", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attrs.size()));
      std::vector<KeyValue> ::const_iterator _iter13;
      for (_iter13 = this->attrs.begin(); _iter13 != this->attrs.end(); ++_iter13)
      {
        xfer += (*_iter13).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Runtime &a, Runtime &b) {
  using ::std::swap;
  swap(a.guid, b.guid);
  swap(a.start_micros, b.start_micros);
  swap(a.group_name, b.group_name);
  swap(a.attrs, b.attrs);
  swap(a.__isset, b.__isset);
}

Runtime::Runtime(const Runtime& other14) {
  guid = other14.guid;
  start_micros = other14.start_micros;
  group_name = other14.group_name;
  attrs = other14.attrs;
  __isset = other14.__isset;
}
Runtime::Runtime( Runtime&& other15) {
  guid = std::move(other15.guid);
  start_micros = std::move(other15.start_micros);
  group_name = std::move(other15.group_name);
  attrs = std::move(other15.attrs);
  __isset = std::move(other15.__isset);
}
Runtime& Runtime::operator=(const Runtime& other16) {
  guid = other16.guid;
  start_micros = other16.start_micros;
  group_name = other16.group_name;
  attrs = other16.attrs;
  __isset = other16.__isset;
  return *this;
}
Runtime& Runtime::operator=(Runtime&& other17) {
  guid = std::move(other17.guid);
  start_micros = std::move(other17.start_micros);
  group_name = std::move(other17.group_name);
  attrs = std::move(other17.attrs);
  __isset = std::move(other17.__isset);
  return *this;
}
void Runtime::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Runtime(";
  out << "guid="; (__isset.guid ? (out << to_string(guid)) : (out << "<null>"));
  out << ", " << "start_micros="; (__isset.start_micros ? (out << to_string(start_micros)) : (out << "<null>"));
  out << ", " << "group_name="; (__isset.group_name ? (out << to_string(group_name)) : (out << "<null>"));
  out << ", " << "attrs="; (__isset.attrs ? (out << to_string(attrs)) : (out << "<null>"));
  out << ")";
}


LogRecord::~LogRecord() throw() {
}


void LogRecord::__set_timestamp_micros(const int64_t val) {
  this->timestamp_micros = val;
__isset.timestamp_micros = true;
}

void LogRecord::__set_runtime_guid(const std::string& val) {
  this->runtime_guid = val;
__isset.runtime_guid = true;
}

void LogRecord::__set_span_guid(const std::string& val) {
  this->span_guid = val;
__isset.span_guid = true;
}

void LogRecord::__set_stable_name(const std::string& val) {
  this->stable_name = val;
__isset.stable_name = true;
}

void LogRecord::__set_message(const std::string& val) {
  this->message = val;
__isset.message = true;
}

void LogRecord::__set_level(const std::string& val) {
  this->level = val;
__isset.level = true;
}

void LogRecord::__set_thread_id(const int64_t val) {
  this->thread_id = val;
__isset.thread_id = true;
}

void LogRecord::__set_filename(const std::string& val) {
  this->filename = val;
__isset.filename = true;
}

void LogRecord::__set_line_number(const int64_t val) {
  this->line_number = val;
__isset.line_number = true;
}

void LogRecord::__set_stack_frames(const std::vector<std::string> & val) {
  this->stack_frames = val;
__isset.stack_frames = true;
}

void LogRecord::__set_payload_json(const std::string& val) {
  this->payload_json = val;
__isset.payload_json = true;
}

void LogRecord::__set_error_flag(const bool val) {
  this->error_flag = val;
__isset.error_flag = true;
}

uint32_t LogRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_micros);
          this->__isset.timestamp_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runtime_guid);
          this->__isset.runtime_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->span_guid);
          this->__isset.span_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stable_name);
          this->__isset.stable_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->thread_id);
          this->__isset.thread_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->line_number);
          this->__isset.line_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->stack_frames.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->stack_frames.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += iprot->readString(this->stack_frames[_i22]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.stack_frames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->payload_json);
          this->__isset.payload_json = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->error_flag);
          this->__isset.error_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LogRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("LogRecord");

  if (this->__isset.timestamp_micros) {
    xfer += oprot->writeFieldBegin("timestamp_micros", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->timestamp_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_guid) {
    xfer += oprot->writeFieldBegin("runtime_guid", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->runtime_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.span_guid) {
    xfer += oprot->writeFieldBegin("span_guid", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->span_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stable_name) {
    xfer += oprot->writeFieldBegin("stable_name", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->stable_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->message);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.level) {
    xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->level);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.thread_id) {
    xfer += oprot->writeFieldBegin("thread_id", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->thread_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.filename) {
    xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->filename);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.line_number) {
    xfer += oprot->writeFieldBegin("line_number", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->line_number);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stack_frames) {
    xfer += oprot->writeFieldBegin("stack_frames", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->stack_frames.size()));
      std::vector<std::string> ::const_iterator _iter23;
      for (_iter23 = this->stack_frames.begin(); _iter23 != this->stack_frames.end(); ++_iter23)
      {
        xfer += oprot->writeString((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.payload_json) {
    xfer += oprot->writeFieldBegin("payload_json", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->payload_json);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error_flag) {
    xfer += oprot->writeFieldBegin("error_flag", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->error_flag);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LogRecord &a, LogRecord &b) {
  using ::std::swap;
  swap(a.timestamp_micros, b.timestamp_micros);
  swap(a.runtime_guid, b.runtime_guid);
  swap(a.span_guid, b.span_guid);
  swap(a.stable_name, b.stable_name);
  swap(a.message, b.message);
  swap(a.level, b.level);
  swap(a.thread_id, b.thread_id);
  swap(a.filename, b.filename);
  swap(a.line_number, b.line_number);
  swap(a.stack_frames, b.stack_frames);
  swap(a.payload_json, b.payload_json);
  swap(a.error_flag, b.error_flag);
  swap(a.__isset, b.__isset);
}

LogRecord::LogRecord(const LogRecord& other24) {
  timestamp_micros = other24.timestamp_micros;
  runtime_guid = other24.runtime_guid;
  span_guid = other24.span_guid;
  stable_name = other24.stable_name;
  message = other24.message;
  level = other24.level;
  thread_id = other24.thread_id;
  filename = other24.filename;
  line_number = other24.line_number;
  stack_frames = other24.stack_frames;
  payload_json = other24.payload_json;
  error_flag = other24.error_flag;
  __isset = other24.__isset;
}
LogRecord::LogRecord( LogRecord&& other25) {
  timestamp_micros = std::move(other25.timestamp_micros);
  runtime_guid = std::move(other25.runtime_guid);
  span_guid = std::move(other25.span_guid);
  stable_name = std::move(other25.stable_name);
  message = std::move(other25.message);
  level = std::move(other25.level);
  thread_id = std::move(other25.thread_id);
  filename = std::move(other25.filename);
  line_number = std::move(other25.line_number);
  stack_frames = std::move(other25.stack_frames);
  payload_json = std::move(other25.payload_json);
  error_flag = std::move(other25.error_flag);
  __isset = std::move(other25.__isset);
}
LogRecord& LogRecord::operator=(const LogRecord& other26) {
  timestamp_micros = other26.timestamp_micros;
  runtime_guid = other26.runtime_guid;
  span_guid = other26.span_guid;
  stable_name = other26.stable_name;
  message = other26.message;
  level = other26.level;
  thread_id = other26.thread_id;
  filename = other26.filename;
  line_number = other26.line_number;
  stack_frames = other26.stack_frames;
  payload_json = other26.payload_json;
  error_flag = other26.error_flag;
  __isset = other26.__isset;
  return *this;
}
LogRecord& LogRecord::operator=(LogRecord&& other27) {
  timestamp_micros = std::move(other27.timestamp_micros);
  runtime_guid = std::move(other27.runtime_guid);
  span_guid = std::move(other27.span_guid);
  stable_name = std::move(other27.stable_name);
  message = std::move(other27.message);
  level = std::move(other27.level);
  thread_id = std::move(other27.thread_id);
  filename = std::move(other27.filename);
  line_number = std::move(other27.line_number);
  stack_frames = std::move(other27.stack_frames);
  payload_json = std::move(other27.payload_json);
  error_flag = std::move(other27.error_flag);
  __isset = std::move(other27.__isset);
  return *this;
}
void LogRecord::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "LogRecord(";
  out << "timestamp_micros="; (__isset.timestamp_micros ? (out << to_string(timestamp_micros)) : (out << "<null>"));
  out << ", " << "runtime_guid="; (__isset.runtime_guid ? (out << to_string(runtime_guid)) : (out << "<null>"));
  out << ", " << "span_guid="; (__isset.span_guid ? (out << to_string(span_guid)) : (out << "<null>"));
  out << ", " << "stable_name="; (__isset.stable_name ? (out << to_string(stable_name)) : (out << "<null>"));
  out << ", " << "message="; (__isset.message ? (out << to_string(message)) : (out << "<null>"));
  out << ", " << "level="; (__isset.level ? (out << to_string(level)) : (out << "<null>"));
  out << ", " << "thread_id="; (__isset.thread_id ? (out << to_string(thread_id)) : (out << "<null>"));
  out << ", " << "filename="; (__isset.filename ? (out << to_string(filename)) : (out << "<null>"));
  out << ", " << "line_number="; (__isset.line_number ? (out << to_string(line_number)) : (out << "<null>"));
  out << ", " << "stack_frames="; (__isset.stack_frames ? (out << to_string(stack_frames)) : (out << "<null>"));
  out << ", " << "payload_json="; (__isset.payload_json ? (out << to_string(payload_json)) : (out << "<null>"));
  out << ", " << "error_flag="; (__isset.error_flag ? (out << to_string(error_flag)) : (out << "<null>"));
  out << ")";
}


TraceJoinId::~TraceJoinId() throw() {
}


void TraceJoinId::__set_TraceKey(const std::string& val) {
  this->TraceKey = val;
}

void TraceJoinId::__set_Value(const std::string& val) {
  this->Value = val;
}

uint32_t TraceJoinId::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_TraceKey = false;
  bool isset_Value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->TraceKey);
          isset_TraceKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Value);
          isset_Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_TraceKey)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_Value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TraceJoinId::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TraceJoinId");

  xfer += oprot->writeFieldBegin("TraceKey", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->TraceKey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TraceJoinId &a, TraceJoinId &b) {
  using ::std::swap;
  swap(a.TraceKey, b.TraceKey);
  swap(a.Value, b.Value);
}

TraceJoinId::TraceJoinId(const TraceJoinId& other28) {
  TraceKey = other28.TraceKey;
  Value = other28.Value;
}
TraceJoinId::TraceJoinId( TraceJoinId&& other29) {
  TraceKey = std::move(other29.TraceKey);
  Value = std::move(other29.Value);
}
TraceJoinId& TraceJoinId::operator=(const TraceJoinId& other30) {
  TraceKey = other30.TraceKey;
  Value = other30.Value;
  return *this;
}
TraceJoinId& TraceJoinId::operator=(TraceJoinId&& other31) {
  TraceKey = std::move(other31.TraceKey);
  Value = std::move(other31.Value);
  return *this;
}
void TraceJoinId::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TraceJoinId(";
  out << "TraceKey=" << to_string(TraceKey);
  out << ", " << "Value=" << to_string(Value);
  out << ")";
}


SpanRecord::~SpanRecord() throw() {
}


void SpanRecord::__set_span_guid(const std::string& val) {
  this->span_guid = val;
__isset.span_guid = true;
}

void SpanRecord::__set_runtime_guid(const std::string& val) {
  this->runtime_guid = val;
__isset.runtime_guid = true;
}

void SpanRecord::__set_span_name(const std::string& val) {
  this->span_name = val;
__isset.span_name = true;
}

void SpanRecord::__set_join_ids(const std::vector<TraceJoinId> & val) {
  this->join_ids = val;
__isset.join_ids = true;
}

void SpanRecord::__set_oldest_micros(const int64_t val) {
  this->oldest_micros = val;
__isset.oldest_micros = true;
}

void SpanRecord::__set_youngest_micros(const int64_t val) {
  this->youngest_micros = val;
__isset.youngest_micros = true;
}

void SpanRecord::__set_attributes(const std::vector<KeyValue> & val) {
  this->attributes = val;
__isset.attributes = true;
}

void SpanRecord::__set_error_flag(const bool val) {
  this->error_flag = val;
__isset.error_flag = true;
}

void SpanRecord::__set_log_records(const std::vector<LogRecord> & val) {
  this->log_records = val;
__isset.log_records = true;
}

uint32_t SpanRecord::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->span_guid);
          this->__isset.span_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->runtime_guid);
          this->__isset.runtime_guid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->span_name);
          this->__isset.span_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->join_ids.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->join_ids.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += this->join_ids[_i36].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.join_ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_micros);
          this->__isset.oldest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->youngest_micros);
          this->__isset.youngest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->attributes.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->attributes.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += this->attributes[_i41].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->error_flag);
          this->__isset.error_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->log_records.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->log_records.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += this->log_records[_i46].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.log_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SpanRecord::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SpanRecord");

  if (this->__isset.span_guid) {
    xfer += oprot->writeFieldBegin("span_guid", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->span_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.runtime_guid) {
    xfer += oprot->writeFieldBegin("runtime_guid", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->runtime_guid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.span_name) {
    xfer += oprot->writeFieldBegin("span_name", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->span_name);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.join_ids) {
    xfer += oprot->writeFieldBegin("join_ids", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->join_ids.size()));
      std::vector<TraceJoinId> ::const_iterator _iter47;
      for (_iter47 = this->join_ids.begin(); _iter47 != this->join_ids.end(); ++_iter47)
      {
        xfer += (*_iter47).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oldest_micros) {
    xfer += oprot->writeFieldBegin("oldest_micros", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->oldest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.youngest_micros) {
    xfer += oprot->writeFieldBegin("youngest_micros", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->youngest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.attributes) {
    xfer += oprot->writeFieldBegin("attributes", ::apache::thrift::protocol::T_LIST, 8);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->attributes.size()));
      std::vector<KeyValue> ::const_iterator _iter48;
      for (_iter48 = this->attributes.begin(); _iter48 != this->attributes.end(); ++_iter48)
      {
        xfer += (*_iter48).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.error_flag) {
    xfer += oprot->writeFieldBegin("error_flag", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->error_flag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.log_records) {
    xfer += oprot->writeFieldBegin("log_records", ::apache::thrift::protocol::T_LIST, 10);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->log_records.size()));
      std::vector<LogRecord> ::const_iterator _iter49;
      for (_iter49 = this->log_records.begin(); _iter49 != this->log_records.end(); ++_iter49)
      {
        xfer += (*_iter49).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpanRecord &a, SpanRecord &b) {
  using ::std::swap;
  swap(a.span_guid, b.span_guid);
  swap(a.runtime_guid, b.runtime_guid);
  swap(a.span_name, b.span_name);
  swap(a.join_ids, b.join_ids);
  swap(a.oldest_micros, b.oldest_micros);
  swap(a.youngest_micros, b.youngest_micros);
  swap(a.attributes, b.attributes);
  swap(a.error_flag, b.error_flag);
  swap(a.log_records, b.log_records);
  swap(a.__isset, b.__isset);
}

SpanRecord::SpanRecord(const SpanRecord& other50) {
  span_guid = other50.span_guid;
  runtime_guid = other50.runtime_guid;
  span_name = other50.span_name;
  join_ids = other50.join_ids;
  oldest_micros = other50.oldest_micros;
  youngest_micros = other50.youngest_micros;
  attributes = other50.attributes;
  error_flag = other50.error_flag;
  log_records = other50.log_records;
  __isset = other50.__isset;
}
SpanRecord::SpanRecord( SpanRecord&& other51) {
  span_guid = std::move(other51.span_guid);
  runtime_guid = std::move(other51.runtime_guid);
  span_name = std::move(other51.span_name);
  join_ids = std::move(other51.join_ids);
  oldest_micros = std::move(other51.oldest_micros);
  youngest_micros = std::move(other51.youngest_micros);
  attributes = std::move(other51.attributes);
  error_flag = std::move(other51.error_flag);
  log_records = std::move(other51.log_records);
  __isset = std::move(other51.__isset);
}
SpanRecord& SpanRecord::operator=(const SpanRecord& other52) {
  span_guid = other52.span_guid;
  runtime_guid = other52.runtime_guid;
  span_name = other52.span_name;
  join_ids = other52.join_ids;
  oldest_micros = other52.oldest_micros;
  youngest_micros = other52.youngest_micros;
  attributes = other52.attributes;
  error_flag = other52.error_flag;
  log_records = other52.log_records;
  __isset = other52.__isset;
  return *this;
}
SpanRecord& SpanRecord::operator=(SpanRecord&& other53) {
  span_guid = std::move(other53.span_guid);
  runtime_guid = std::move(other53.runtime_guid);
  span_name = std::move(other53.span_name);
  join_ids = std::move(other53.join_ids);
  oldest_micros = std::move(other53.oldest_micros);
  youngest_micros = std::move(other53.youngest_micros);
  attributes = std::move(other53.attributes);
  error_flag = std::move(other53.error_flag);
  log_records = std::move(other53.log_records);
  __isset = std::move(other53.__isset);
  return *this;
}
void SpanRecord::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SpanRecord(";
  out << "span_guid="; (__isset.span_guid ? (out << to_string(span_guid)) : (out << "<null>"));
  out << ", " << "runtime_guid="; (__isset.runtime_guid ? (out << to_string(runtime_guid)) : (out << "<null>"));
  out << ", " << "span_name="; (__isset.span_name ? (out << to_string(span_name)) : (out << "<null>"));
  out << ", " << "join_ids="; (__isset.join_ids ? (out << to_string(join_ids)) : (out << "<null>"));
  out << ", " << "oldest_micros="; (__isset.oldest_micros ? (out << to_string(oldest_micros)) : (out << "<null>"));
  out << ", " << "youngest_micros="; (__isset.youngest_micros ? (out << to_string(youngest_micros)) : (out << "<null>"));
  out << ", " << "attributes="; (__isset.attributes ? (out << to_string(attributes)) : (out << "<null>"));
  out << ", " << "error_flag="; (__isset.error_flag ? (out << to_string(error_flag)) : (out << "<null>"));
  out << ", " << "log_records="; (__isset.log_records ? (out << to_string(log_records)) : (out << "<null>"));
  out << ")";
}


Auth::~Auth() throw() {
}


void Auth::__set_access_token(const std::string& val) {
  this->access_token = val;
__isset.access_token = true;
}

uint32_t Auth::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->access_token);
          this->__isset.access_token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Auth::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Auth");

  if (this->__isset.access_token) {
    xfer += oprot->writeFieldBegin("access_token", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->access_token);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Auth &a, Auth &b) {
  using ::std::swap;
  swap(a.access_token, b.access_token);
  swap(a.__isset, b.__isset);
}

Auth::Auth(const Auth& other54) {
  access_token = other54.access_token;
  __isset = other54.__isset;
}
Auth::Auth( Auth&& other55) {
  access_token = std::move(other55.access_token);
  __isset = std::move(other55.__isset);
}
Auth& Auth::operator=(const Auth& other56) {
  access_token = other56.access_token;
  __isset = other56.__isset;
  return *this;
}
Auth& Auth::operator=(Auth&& other57) {
  access_token = std::move(other57.access_token);
  __isset = std::move(other57.__isset);
  return *this;
}
void Auth::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Auth(";
  out << "access_token="; (__isset.access_token ? (out << to_string(access_token)) : (out << "<null>"));
  out << ")";
}


Timing::~Timing() throw() {
}


void Timing::__set_receive_micros(const int64_t val) {
  this->receive_micros = val;
__isset.receive_micros = true;
}

void Timing::__set_transmit_micros(const int64_t val) {
  this->transmit_micros = val;
__isset.transmit_micros = true;
}

uint32_t Timing::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receive_micros);
          this->__isset.receive_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->transmit_micros);
          this->__isset.transmit_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Timing::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Timing");

  if (this->__isset.receive_micros) {
    xfer += oprot->writeFieldBegin("receive_micros", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->receive_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.transmit_micros) {
    xfer += oprot->writeFieldBegin("transmit_micros", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->transmit_micros);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Timing &a, Timing &b) {
  using ::std::swap;
  swap(a.receive_micros, b.receive_micros);
  swap(a.transmit_micros, b.transmit_micros);
  swap(a.__isset, b.__isset);
}

Timing::Timing(const Timing& other58) {
  receive_micros = other58.receive_micros;
  transmit_micros = other58.transmit_micros;
  __isset = other58.__isset;
}
Timing::Timing( Timing&& other59) {
  receive_micros = std::move(other59.receive_micros);
  transmit_micros = std::move(other59.transmit_micros);
  __isset = std::move(other59.__isset);
}
Timing& Timing::operator=(const Timing& other60) {
  receive_micros = other60.receive_micros;
  transmit_micros = other60.transmit_micros;
  __isset = other60.__isset;
  return *this;
}
Timing& Timing::operator=(Timing&& other61) {
  receive_micros = std::move(other61.receive_micros);
  transmit_micros = std::move(other61.transmit_micros);
  __isset = std::move(other61.__isset);
  return *this;
}
void Timing::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Timing(";
  out << "receive_micros="; (__isset.receive_micros ? (out << to_string(receive_micros)) : (out << "<null>"));
  out << ", " << "transmit_micros="; (__isset.transmit_micros ? (out << to_string(transmit_micros)) : (out << "<null>"));
  out << ")";
}


SampleCount::~SampleCount() throw() {
}


void SampleCount::__set_oldest_micros(const int64_t val) {
  this->oldest_micros = val;
__isset.oldest_micros = true;
}

void SampleCount::__set_youngest_micros(const int64_t val) {
  this->youngest_micros = val;
__isset.youngest_micros = true;
}

void SampleCount::__set_count(const int64_t val) {
  this->count = val;
__isset.count = true;
}

uint32_t SampleCount::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_micros);
          this->__isset.oldest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->youngest_micros);
          this->__isset.youngest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SampleCount::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SampleCount");

  if (this->__isset.oldest_micros) {
    xfer += oprot->writeFieldBegin("oldest_micros", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->oldest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.youngest_micros) {
    xfer += oprot->writeFieldBegin("youngest_micros", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->youngest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.count) {
    xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->count);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SampleCount &a, SampleCount &b) {
  using ::std::swap;
  swap(a.oldest_micros, b.oldest_micros);
  swap(a.youngest_micros, b.youngest_micros);
  swap(a.count, b.count);
  swap(a.__isset, b.__isset);
}

SampleCount::SampleCount(const SampleCount& other62) {
  oldest_micros = other62.oldest_micros;
  youngest_micros = other62.youngest_micros;
  count = other62.count;
  __isset = other62.__isset;
}
SampleCount::SampleCount( SampleCount&& other63) {
  oldest_micros = std::move(other63.oldest_micros);
  youngest_micros = std::move(other63.youngest_micros);
  count = std::move(other63.count);
  __isset = std::move(other63.__isset);
}
SampleCount& SampleCount::operator=(const SampleCount& other64) {
  oldest_micros = other64.oldest_micros;
  youngest_micros = other64.youngest_micros;
  count = other64.count;
  __isset = other64.__isset;
  return *this;
}
SampleCount& SampleCount::operator=(SampleCount&& other65) {
  oldest_micros = std::move(other65.oldest_micros);
  youngest_micros = std::move(other65.youngest_micros);
  count = std::move(other65.count);
  __isset = std::move(other65.__isset);
  return *this;
}
void SampleCount::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SampleCount(";
  out << "oldest_micros="; (__isset.oldest_micros ? (out << to_string(oldest_micros)) : (out << "<null>"));
  out << ", " << "youngest_micros="; (__isset.youngest_micros ? (out << to_string(youngest_micros)) : (out << "<null>"));
  out << ", " << "count="; (__isset.count ? (out << to_string(count)) : (out << "<null>"));
  out << ")";
}


ReportRequest::~ReportRequest() throw() {
}


void ReportRequest::__set_runtime(const Runtime& val) {
  this->runtime = val;
__isset.runtime = true;
}

void ReportRequest::__set_span_records(const std::vector<SpanRecord> & val) {
  this->span_records = val;
__isset.span_records = true;
}

void ReportRequest::__set_log_records(const std::vector<LogRecord> & val) {
  this->log_records = val;
__isset.log_records = true;
}

void ReportRequest::__set_timestamp_offset_micros(const int64_t val) {
  this->timestamp_offset_micros = val;
__isset.timestamp_offset_micros = true;
}

void ReportRequest::__set_oldest_micros(const int64_t val) {
  this->oldest_micros = val;
__isset.oldest_micros = true;
}

void ReportRequest::__set_youngest_micros(const int64_t val) {
  this->youngest_micros = val;
__isset.youngest_micros = true;
}

void ReportRequest::__set_counters(const std::vector<NamedCounter> & val) {
  this->counters = val;
__isset.counters = true;
}

uint32_t ReportRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->runtime.read(iprot);
          this->__isset.runtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->span_records.clear();
            uint32_t _size66;
            ::apache::thrift::protocol::TType _etype69;
            xfer += iprot->readListBegin(_etype69, _size66);
            this->span_records.resize(_size66);
            uint32_t _i70;
            for (_i70 = 0; _i70 < _size66; ++_i70)
            {
              xfer += this->span_records[_i70].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.span_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->log_records.clear();
            uint32_t _size71;
            ::apache::thrift::protocol::TType _etype74;
            xfer += iprot->readListBegin(_etype74, _size71);
            this->log_records.resize(_size71);
            uint32_t _i75;
            for (_i75 = 0; _i75 < _size71; ++_i75)
            {
              xfer += this->log_records[_i75].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.log_records = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_offset_micros);
          this->__isset.timestamp_offset_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->oldest_micros);
          this->__isset.oldest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->youngest_micros);
          this->__isset.youngest_micros = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->counters.clear();
            uint32_t _size76;
            ::apache::thrift::protocol::TType _etype79;
            xfer += iprot->readListBegin(_etype79, _size76);
            this->counters.resize(_size76);
            uint32_t _i80;
            for (_i80 = 0; _i80 < _size76; ++_i80)
            {
              xfer += this->counters[_i80].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.counters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportRequest");

  if (this->__isset.runtime) {
    xfer += oprot->writeFieldBegin("runtime", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->runtime.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.span_records) {
    xfer += oprot->writeFieldBegin("span_records", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->span_records.size()));
      std::vector<SpanRecord> ::const_iterator _iter81;
      for (_iter81 = this->span_records.begin(); _iter81 != this->span_records.end(); ++_iter81)
      {
        xfer += (*_iter81).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.log_records) {
    xfer += oprot->writeFieldBegin("log_records", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->log_records.size()));
      std::vector<LogRecord> ::const_iterator _iter82;
      for (_iter82 = this->log_records.begin(); _iter82 != this->log_records.end(); ++_iter82)
      {
        xfer += (*_iter82).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp_offset_micros) {
    xfer += oprot->writeFieldBegin("timestamp_offset_micros", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->timestamp_offset_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.oldest_micros) {
    xfer += oprot->writeFieldBegin("oldest_micros", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->oldest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.youngest_micros) {
    xfer += oprot->writeFieldBegin("youngest_micros", ::apache::thrift::protocol::T_I64, 8);
    xfer += oprot->writeI64(this->youngest_micros);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.counters) {
    xfer += oprot->writeFieldBegin("counters", ::apache::thrift::protocol::T_LIST, 9);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->counters.size()));
      std::vector<NamedCounter> ::const_iterator _iter83;
      for (_iter83 = this->counters.begin(); _iter83 != this->counters.end(); ++_iter83)
      {
        xfer += (*_iter83).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportRequest &a, ReportRequest &b) {
  using ::std::swap;
  swap(a.runtime, b.runtime);
  swap(a.span_records, b.span_records);
  swap(a.log_records, b.log_records);
  swap(a.timestamp_offset_micros, b.timestamp_offset_micros);
  swap(a.oldest_micros, b.oldest_micros);
  swap(a.youngest_micros, b.youngest_micros);
  swap(a.counters, b.counters);
  swap(a.__isset, b.__isset);
}

ReportRequest::ReportRequest(const ReportRequest& other84) {
  runtime = other84.runtime;
  span_records = other84.span_records;
  log_records = other84.log_records;
  timestamp_offset_micros = other84.timestamp_offset_micros;
  oldest_micros = other84.oldest_micros;
  youngest_micros = other84.youngest_micros;
  counters = other84.counters;
  __isset = other84.__isset;
}
ReportRequest::ReportRequest( ReportRequest&& other85) {
  runtime = std::move(other85.runtime);
  span_records = std::move(other85.span_records);
  log_records = std::move(other85.log_records);
  timestamp_offset_micros = std::move(other85.timestamp_offset_micros);
  oldest_micros = std::move(other85.oldest_micros);
  youngest_micros = std::move(other85.youngest_micros);
  counters = std::move(other85.counters);
  __isset = std::move(other85.__isset);
}
ReportRequest& ReportRequest::operator=(const ReportRequest& other86) {
  runtime = other86.runtime;
  span_records = other86.span_records;
  log_records = other86.log_records;
  timestamp_offset_micros = other86.timestamp_offset_micros;
  oldest_micros = other86.oldest_micros;
  youngest_micros = other86.youngest_micros;
  counters = other86.counters;
  __isset = other86.__isset;
  return *this;
}
ReportRequest& ReportRequest::operator=(ReportRequest&& other87) {
  runtime = std::move(other87.runtime);
  span_records = std::move(other87.span_records);
  log_records = std::move(other87.log_records);
  timestamp_offset_micros = std::move(other87.timestamp_offset_micros);
  oldest_micros = std::move(other87.oldest_micros);
  youngest_micros = std::move(other87.youngest_micros);
  counters = std::move(other87.counters);
  __isset = std::move(other87.__isset);
  return *this;
}
void ReportRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportRequest(";
  out << "runtime="; (__isset.runtime ? (out << to_string(runtime)) : (out << "<null>"));
  out << ", " << "span_records="; (__isset.span_records ? (out << to_string(span_records)) : (out << "<null>"));
  out << ", " << "log_records="; (__isset.log_records ? (out << to_string(log_records)) : (out << "<null>"));
  out << ", " << "timestamp_offset_micros="; (__isset.timestamp_offset_micros ? (out << to_string(timestamp_offset_micros)) : (out << "<null>"));
  out << ", " << "oldest_micros="; (__isset.oldest_micros ? (out << to_string(oldest_micros)) : (out << "<null>"));
  out << ", " << "youngest_micros="; (__isset.youngest_micros ? (out << to_string(youngest_micros)) : (out << "<null>"));
  out << ", " << "counters="; (__isset.counters ? (out << to_string(counters)) : (out << "<null>"));
  out << ")";
}


Command::~Command() throw() {
}


void Command::__set_disable(const bool val) {
  this->disable = val;
__isset.disable = true;
}

uint32_t Command::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->disable);
          this->__isset.disable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Command::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Command");

  if (this->__isset.disable) {
    xfer += oprot->writeFieldBegin("disable", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->disable);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Command &a, Command &b) {
  using ::std::swap;
  swap(a.disable, b.disable);
  swap(a.__isset, b.__isset);
}

Command::Command(const Command& other88) {
  disable = other88.disable;
  __isset = other88.__isset;
}
Command::Command( Command&& other89) {
  disable = std::move(other89.disable);
  __isset = std::move(other89.__isset);
}
Command& Command::operator=(const Command& other90) {
  disable = other90.disable;
  __isset = other90.__isset;
  return *this;
}
Command& Command::operator=(Command&& other91) {
  disable = std::move(other91.disable);
  __isset = std::move(other91.__isset);
  return *this;
}
void Command::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Command(";
  out << "disable="; (__isset.disable ? (out << to_string(disable)) : (out << "<null>"));
  out << ")";
}


ReportResponse::~ReportResponse() throw() {
}


void ReportResponse::__set_commands(const std::vector<Command> & val) {
  this->commands = val;
__isset.commands = true;
}

void ReportResponse::__set_timing(const Timing& val) {
  this->timing = val;
__isset.timing = true;
}

void ReportResponse::__set_errors(const std::vector<std::string> & val) {
  this->errors = val;
__isset.errors = true;
}

uint32_t ReportResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commands.clear();
            uint32_t _size92;
            ::apache::thrift::protocol::TType _etype95;
            xfer += iprot->readListBegin(_etype95, _size92);
            this->commands.resize(_size92);
            uint32_t _i96;
            for (_i96 = 0; _i96 < _size92; ++_i96)
            {
              xfer += this->commands[_i96].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.commands = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->timing.read(iprot);
          this->__isset.timing = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->errors.clear();
            uint32_t _size97;
            ::apache::thrift::protocol::TType _etype100;
            xfer += iprot->readListBegin(_etype100, _size97);
            this->errors.resize(_size97);
            uint32_t _i101;
            for (_i101 = 0; _i101 < _size97; ++_i101)
            {
              xfer += iprot->readString(this->errors[_i101]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.errors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReportResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReportResponse");

  if (this->__isset.commands) {
    xfer += oprot->writeFieldBegin("commands", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commands.size()));
      std::vector<Command> ::const_iterator _iter102;
      for (_iter102 = this->commands.begin(); _iter102 != this->commands.end(); ++_iter102)
      {
        xfer += (*_iter102).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timing) {
    xfer += oprot->writeFieldBegin("timing", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->timing.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.errors) {
    xfer += oprot->writeFieldBegin("errors", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->errors.size()));
      std::vector<std::string> ::const_iterator _iter103;
      for (_iter103 = this->errors.begin(); _iter103 != this->errors.end(); ++_iter103)
      {
        xfer += oprot->writeString((*_iter103));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReportResponse &a, ReportResponse &b) {
  using ::std::swap;
  swap(a.commands, b.commands);
  swap(a.timing, b.timing);
  swap(a.errors, b.errors);
  swap(a.__isset, b.__isset);
}

ReportResponse::ReportResponse(const ReportResponse& other104) {
  commands = other104.commands;
  timing = other104.timing;
  errors = other104.errors;
  __isset = other104.__isset;
}
ReportResponse::ReportResponse( ReportResponse&& other105) {
  commands = std::move(other105.commands);
  timing = std::move(other105.timing);
  errors = std::move(other105.errors);
  __isset = std::move(other105.__isset);
}
ReportResponse& ReportResponse::operator=(const ReportResponse& other106) {
  commands = other106.commands;
  timing = other106.timing;
  errors = other106.errors;
  __isset = other106.__isset;
  return *this;
}
ReportResponse& ReportResponse::operator=(ReportResponse&& other107) {
  commands = std::move(other107.commands);
  timing = std::move(other107.timing);
  errors = std::move(other107.errors);
  __isset = std::move(other107.__isset);
  return *this;
}
void ReportResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReportResponse(";
  out << "commands="; (__isset.commands ? (out << to_string(commands)) : (out << "<null>"));
  out << ", " << "timing="; (__isset.timing ? (out << to_string(timing)) : (out << "<null>"));
  out << ", " << "errors="; (__isset.errors ? (out << to_string(errors)) : (out << "<null>"));
  out << ")";
}

} // namespace
