/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ReportingService_H
#define ReportingService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "lightstep_types.h"

namespace lightstep_thrift {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ReportingServiceIf {
 public:
  virtual ~ReportingServiceIf() {}
  virtual void Report(ReportResponse& _return, const Auth& auth, const ReportRequest& request) = 0;
};

class ReportingServiceIfFactory {
 public:
  typedef ReportingServiceIf Handler;

  virtual ~ReportingServiceIfFactory() {}

  virtual ReportingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ReportingServiceIf* /* handler */) = 0;
};

class ReportingServiceIfSingletonFactory : virtual public ReportingServiceIfFactory {
 public:
  ReportingServiceIfSingletonFactory(const boost::shared_ptr<ReportingServiceIf>& iface) : iface_(iface) {}
  virtual ~ReportingServiceIfSingletonFactory() {}

  virtual ReportingServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ReportingServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ReportingServiceIf> iface_;
};

class ReportingServiceNull : virtual public ReportingServiceIf {
 public:
  virtual ~ReportingServiceNull() {}
  void Report(ReportResponse& /* _return */, const Auth& /* auth */, const ReportRequest& /* request */) {
    return;
  }
};

typedef struct _ReportingService_Report_args__isset {
  _ReportingService_Report_args__isset() : auth(false), request(false) {}
  bool auth :1;
  bool request :1;
} _ReportingService_Report_args__isset;

class ReportingService_Report_args {
 public:

  ReportingService_Report_args(const ReportingService_Report_args&);
  ReportingService_Report_args(ReportingService_Report_args&&);
  ReportingService_Report_args& operator=(const ReportingService_Report_args&);
  ReportingService_Report_args& operator=(ReportingService_Report_args&&);
  ReportingService_Report_args() {
  }

  virtual ~ReportingService_Report_args() throw();
  Auth auth;
  ReportRequest request;

  _ReportingService_Report_args__isset __isset;

  void __set_auth(const Auth& val);

  void __set_request(const ReportRequest& val);

  bool operator == (const ReportingService_Report_args & rhs) const
  {
    if (!(auth == rhs.auth))
      return false;
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const ReportingService_Report_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportingService_Report_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ReportingService_Report_pargs {
 public:


  virtual ~ReportingService_Report_pargs() throw();
  const Auth* auth;
  const ReportRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReportingService_Report_result__isset {
  _ReportingService_Report_result__isset() : success(false) {}
  bool success :1;
} _ReportingService_Report_result__isset;

class ReportingService_Report_result {
 public:

  ReportingService_Report_result(const ReportingService_Report_result&);
  ReportingService_Report_result(ReportingService_Report_result&&);
  ReportingService_Report_result& operator=(const ReportingService_Report_result&);
  ReportingService_Report_result& operator=(ReportingService_Report_result&&);
  ReportingService_Report_result() {
  }

  virtual ~ReportingService_Report_result() throw();
  ReportResponse success;

  _ReportingService_Report_result__isset __isset;

  void __set_success(const ReportResponse& val);

  bool operator == (const ReportingService_Report_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ReportingService_Report_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReportingService_Report_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ReportingService_Report_presult__isset {
  _ReportingService_Report_presult__isset() : success(false) {}
  bool success :1;
} _ReportingService_Report_presult__isset;

class ReportingService_Report_presult {
 public:


  virtual ~ReportingService_Report_presult() throw();
  ReportResponse* success;

  _ReportingService_Report_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ReportingServiceClient : virtual public ReportingServiceIf {
 public:
  ReportingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReportingServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Report(ReportResponse& _return, const Auth& auth, const ReportRequest& request);
  void send_Report(const Auth& auth, const ReportRequest& request);
  void recv_Report(ReportResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ReportingServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ReportingServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ReportingServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Report(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ReportingServiceProcessor(boost::shared_ptr<ReportingServiceIf> iface) :
    iface_(iface) {
    processMap_["Report"] = &ReportingServiceProcessor::process_Report;
  }

  virtual ~ReportingServiceProcessor() {}
};

class ReportingServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ReportingServiceProcessorFactory(const ::boost::shared_ptr< ReportingServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ReportingServiceIfFactory > handlerFactory_;
};

class ReportingServiceMultiface : virtual public ReportingServiceIf {
 public:
  ReportingServiceMultiface(std::vector<boost::shared_ptr<ReportingServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ReportingServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ReportingServiceIf> > ifaces_;
  ReportingServiceMultiface() {}
  void add(boost::shared_ptr<ReportingServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Report(ReportResponse& _return, const Auth& auth, const ReportRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Report(_return, auth, request);
    }
    ifaces_[i]->Report(_return, auth, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ReportingServiceConcurrentClient : virtual public ReportingServiceIf {
 public:
  ReportingServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ReportingServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Report(ReportResponse& _return, const Auth& auth, const ReportRequest& request);
  int32_t send_Report(const Auth& auth, const ReportRequest& request);
  void recv_Report(ReportResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
